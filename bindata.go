// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/config.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x06\x9b\xc3\x26\xd8\x44\xb9\x14\x39\xf8\x16\x6c\xb6\xc5\x02\x6d\xb2\x48\x5c\xb4\x07\x03\x01\x45\x8e\x2c\x22\x14\xa9\x9d\x19\xc5\xf6\x7e\x7d\x41\x52\x4e\xe2\x36\x94\x5d\xb4\xa7\x38\x1c\xf2\xbd\xc7\x47\xce\x0c\xd5\xa1\x90\xd5\x3c\x9f\x9d\xc0\xed\xc3\x0d\xfc\x96\xff\x9d\x9d\xc0\x42\x3d\xa1\x87\x86\x42\x07\xad\x48\xcf\xf3\xcb\x4b\xcf\xa6\x32\x41\x73\xe5\x9d\x47\x71\xaa\x8e\xbf\x2e\xd1\x5f\x3a\x25\xc8\x72\xd9\x29\xdf\xab\x15\x72\x9c\x78\xa1\x83\x17\x0a\xae\x6a\xa5\x73\x27\x2c\x4a\x2c\x8b\xd5\x7c\xa1\xc3\xe0\x05\x89\x67\x00\x7e\xe8\xaa\xef\x03\x92\x45\x9e\xcf\x00\x00\x5a\x74\xfd\x1c\x3e\xfa\xa1\xab\x91\x20\x34\x30\x46\x81\x50\xa3\x7d\x46\x03\xa7\xd2\x22\x88\xee\x41\x79\x03\x83\xe9\x5f\x66\x28\x63\xd0\xc0\xd0\x9f\x55\x1f\x13\x94\x6c\x7b\x9c\xc3\x48\x36\x03\x10\xdb\x61\x55\x87\x20\x7b\x4c\x43\x1f\xc7\xc1\x7a\x60\xd4\xc1\x1b\x06\xb6\x5e\x23\x44\x16\x46\x7a\x46\x82\xb5\x62\x60\x51\x24\x68\x2a\xf8\xc3\x4a\x0b\x0d\x29\x2d\x36\x78\xe5\x76\xab\xf6\x38\x57\x6a\x58\xe1\x8e\x11\x9d\xea\x19\xcd\x1e\x69\xa2\x7c\xe5\x71\x8a\x25\x32\x48\xdc\x66\x1f\x48\xce\xdf\xe8\x19\x29\x8f\xe5\x64\xfb\x03\x2b\x53\x57\xc6\xf2\xd3\x1e\x67\x0c\x44\x43\xd3\x11\xd6\x10\x3c\xc4\x29\x89\xa9\xde\x0a\x4e\xa3\x75\xd8\xbd\x0b\x16\xd5\xdf\xdc\x3e\x80\x51\xa2\x6a\xc5\xc9\xc7\x0e\xbb\x40\xdb\x63\x80\x37\x0d\x99\x22\x74\x86\x81\x26\x10\xfc\x08\x1e\x41\x48\x79\x6e\x90\x38\x1d\xbc\x0f\x62\x9b\x78\xea\xd6\x43\x84\x81\x9e\x82\x46\xe6\x73\xc0\x8d\x76\x83\x41\x86\xc5\xc3\xd7\x5f\x92\xb0\x63\xa4\xe8\xe0\x1b\xbb\x2a\xbb\x16\x25\x38\xcb\x02\x8d\x75\xf8\x6a\xde\x0b\x59\x34\x22\x3a\x1b\x71\x12\xe2\xbf\x20\x2d\x39\x90\xc3\x69\x0b\x6f\x7d\x7d\xc2\x5e\x40\xd6\x56\x8f\xb7\x36\xdd\xd1\xe8\xc9\xbe\x0f\x93\xf4\x31\xef\xd0\xf8\x43\x49\xb7\x8e\x37\xef\x4b\x3c\xe0\xbb\x6f\x8b\x42\x5a\xed\xa0\x90\xe8\x10\x5a\x6b\x75\x0b\x8d\xb2\x0e\x4d\x46\xed\x15\x31\x4e\xe0\x0e\xa6\x3f\x80\x19\xe2\xe6\x7f\xbf\xf9\x06\xb6\xff\x69\x1a\xe8\xea\x78\xa4\xab\x09\x24\xd1\x25\x49\x3a\x78\x8f\x29\x45\x47\xb0\xc5\xe7\x43\xb2\x44\x17\x65\x15\xd0\x26\xa5\xb9\xd2\x79\xfe\x13\xec\xd7\x87\x24\x2d\xfd\x78\x29\xa0\x84\x31\xaf\xe2\xa9\x48\xaa\x14\x59\xe1\x34\xe3\xf1\xfa\x13\xe5\xd5\x51\x94\x53\xbb\x54\x9e\xd7\x48\x8f\xeb\xf0\xa8\x54\x81\x3b\x4f\x19\xaf\xef\xed\xdd\x97\xfb\xfb\xbb\x7b\x20\x1d\x0c\xa6\x3c\x89\xc3\x61\x10\xb8\xbe\x86\xc6\xa9\xd5\x39\x48\x6b\x63\x21\x79\x93\xca\x84\x0d\x12\x29\xc7\x13\x42\x68\x73\xf8\xca\xc7\xea\x95\xaf\x7d\x46\x4d\x3d\x6c\x4c\x81\x29\x5f\x27\xa0\x77\x9b\xdb\x87\x4e\xd5\xb1\xb3\x72\x18\x9b\xd4\xa6\x29\x61\x5f\xff\xf9\xf3\x3d\x10\x7e\x1f\x90\x85\x73\xe7\xd7\xce\xa2\x17\x8e\x6d\x57\x09\xac\x82\xe4\x8a\x93\x5d\x8c\xed\xca\x6d\x4b\x0d\x37\xb1\xd9\x32\xdb\xd7\xff\x9d\x4d\x68\xf0\x5a\xc9\xdf\xba\x6d\xe1\x62\x2c\x3e\xa7\xe3\x07\x46\x99\x80\x34\x14\xfa\xbe\x08\xb8\x3b\xe7\x24\x77\x8d\x84\x30\xce\x87\x1a\xb5\x1a\x38\xf5\xf7\xed\xae\xe6\xb1\xf2\x56\xb6\xa0\x5b\xd4\x4f\x05\xca\xd8\x67\xaa\x4e\xb1\x60\xc9\xb5\x1c\x4c\x13\x79\x74\xa7\x82\x45\x8b\x8c\x29\x9b\xf2\x78\xda\xa0\x0f\xf0\x61\xb4\xf7\x62\xd3\xd0\x07\x40\x2f\x51\xed\x14\x35\x3b\xf5\x8c\x05\xe6\x14\x3b\x86\xf8\x78\xd6\x93\xdd\x73\x33\x3b\xd8\x46\x02\xa7\x6a\x74\x0c\xf1\x39\x61\x62\xa7\xe5\xd0\xc5\xd4\x59\xe1\x06\x9e\x95\x1b\x30\xbe\x4c\x5b\x04\xad\x7a\x19\x08\x61\x45\x61\xe8\xc1\x7a\x83\x1b\xe0\x36\x0c\xce\x40\xa7\x64\x4c\x8b\x3c\x3c\x3e\x54\x12\x30\x78\xd5\x21\x0c\xde\x20\x8d\x4c\xb3\xf4\xe7\xf1\xe5\x19\x9c\xce\x7d\x59\x45\xa1\xcb\xea\x74\xb9\xfe\x74\x96\xfd\x88\x0b\xe7\x31\xf6\x18\x43\x69\x28\x03\xe4\x30\xc0\x05\xbc\x04\xa6\x3b\x6a\xaa\x37\x71\x64\x9b\x56\x94\x6f\xdf\xb2\x0a\x7d\x2c\x5b\x05\x1d\x39\xf8\x9f\x95\x64\x98\x29\x15\xda\x29\xe6\x82\x88\x14\x7b\x57\xc3\x6b\xe4\x68\x3b\xd2\x92\x29\x25\x34\x61\x07\x15\xdd\x78\x8d\x14\x4b\x42\xba\x7f\x5a\x11\x59\x34\x59\x11\xa1\x0c\xe4\x61\xc2\x9b\xfc\xf6\x3a\x5d\x9a\x4f\x67\xcb\xfd\xcf\x98\x2c\x2a\xc7\x1f\xc7\xc8\xbb\xca\xf2\x94\x69\x93\x5a\xe5\x4d\x2c\x1f\xf5\xf6\xed\x57\xc9\xf8\xd0\x7b\x57\xda\x5f\x01\x00\x00\xff\xff\xf9\xee\xd4\x6d\xd3\x0d\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3539, mode: os.FileMode(420), modTime: time.Unix(1681491650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
